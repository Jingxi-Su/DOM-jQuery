//jQuery是一个不需要加new的构造函数
window.$ = window.jQuery = function(selectorOrArrayOrTemplate) {
    let elements;
    if (typeof selectorOrArrayOrTemplate === "string") {
      if (selectorOrArrayOrTemplate[0] === "<") {
        // 创建 div
         elements = [createElement(selectorOrArrayOrTemplate)];
          //构造出来的对象（jQuery对象）可以操作elements，不return elements，return它构造出来的对象（jQuery对象）
          } else {
         // 查找 div
         elements = document.querySelectorAll(selectorOrArrayOrTemplate);
          }
        } else if (selectorOrArrayOrTemplate instanceof Array) {
          elements = selectorOrArrayOrTemplate;
        }


    return {
        find(selector){
            let array = [];
            for(let i=0; i<elements.length; i++){
                array = array.concat(Array.from(elements[i].querySelectorAll(selector)));
            }
            array.oldApi = this; //this就是api
            return jQuery(array);//jQuery(array)为了得到新的api对象用来操作array
        },
        each(fn){
            for(let i=0; i<elements.length; i++){
                fn.call(null, elements[i], i);
            }
            return this;
        },
        parent(){
            const array = [];
            this.each((node)=>{
                if(array.indexOf(node.parentNode) === -1){//-1就是不在数组里面
                    array.push(node.parentNode);
                }
            });
            return jQuery(array);//jQuery(array)为了得到新的api对象用来操作array
        },
        children(){
            const array = [];
            this.each((node)=>{
                    array.push(...node.children);//...是展开操作符
            });
            return jQuery(array);//jQuery(array)为了得到新的api对象用来操作array
        },
        print(){
            console.log(elements);//elements就是对应的元素们
        },
        addClass(className){//遍历所有获取到的元素，在class中添加className
            //闭包：函数访问外部的变量
            for(let i=0; i<elements.length; i++){
                elements[i].classList.add(className);
            }
            return this;
        },
        oldApi: selectorOrArray.oldApi,//之前仅放在array身上，现在需要放到api身上，这样end()才能返回
        end(){
            return this.oldApi
        }
    }
} 
